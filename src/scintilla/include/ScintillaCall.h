// SciTE - Scintilla based Text Editor
/** @file ScintillaCall.h
 ** Interface to calling a Scintilla instance.
 **/
// Copyright 1998-2019 by Neil Hodgson <neilh@scintilla.org>
// The License.txt file describes the conditions under which this software may be distributed.

/* Most of this file is automatically generated from the Scintilla.iface interface definition
 * file which contains any comments about the definitions. APIFacer.py does the generation. */

#ifndef SCINTILLACALL_H
#define SCINTILLACALL_H

#include <string_view>

namespace Scintilla {

enum class Message;	// Declare in case ScintillaMessages.h not included

// Declare in case ScintillaStructures.h not included
struct TextRangeFull;
struct TextToFindFull;
struct RangeToFormatFull;

class IDocumentEditable;

using FunctionDirect = intptr_t(*)(intptr_t ptr, unsigned int iMessage, uintptr_t wParam, intptr_t lParam, int *pStatus);

struct Failure {
	Scintilla::Status status;
	explicit Failure(Scintilla::Status status_) noexcept : status(status_) {
	}
};

struct Span {
	// An ordered range
	// end may be less than start when, for example, searching backwards
	Position start;
	Position end;
	explicit Span(Position position) noexcept : start(position), end(position) {
	}
	Span(Position start_, Position end_) noexcept : start(start_), end(end_) {
	}
	Position Length() const noexcept {
		if (end > start)
			return end - start;
		else
			return start - end;
	}
	bool operator==(const Span &other) const noexcept {
		return (other.start == start) && (other.end == end);
	}
};

class ScintillaCall {
	FunctionDirect fn;
	intptr_t ptr;

public:
	Scintilla::Status statusLastCall;
	ScintillaCall() noexcept;
	// All standard methods are fine

	void SetFnPtr(FunctionDirect fn_, intptr_t ptr_) noexcept;
	bool IsValid() const noexcept;
virtual	intptr_t Call(Message msg, uintptr_t wParam=0, intptr_t lParam=0);
virtual	intptr_t CallPointer(Message msg, uintptr_t wParam, void *s);
virtual	intptr_t CallString(Message msg, uintptr_t wParam, const char *s);
virtual	std::string CallReturnString(Message msg, uintptr_t wParam);
	// Common APIs made more structured and type-safe
virtual	Position LineStart(Line line);
virtual	Position LineEnd(Line line);
virtual	Span SelectionSpan();
virtual	Span TargetSpan();
virtual	void SetTarget(Span span);
virtual	void ColouriseAll();
virtual	char CharacterAt(Position position);
virtual	int UnsignedStyleAt(Position position);
virtual	std::string StringOfSpan(Span span);
virtual	std::string StringOfRange(Span span);
virtual	Position ReplaceTarget(std::string_view text);
virtual	Position ReplaceTargetRE(std::string_view text);
virtual	Position ReplaceTargetMinimal(std::string_view text);
virtual	Position SearchInTarget(std::string_view text);
virtual	Span SpanSearchInTarget(std::string_view text);

	// Generated APIs
//++Autogenerated -- start of section automatically generated from Scintilla.iface
//**\(\*\n\)
virtual	void AddText(Position length, const char *text);
virtual	void AddStyledText(Position length, const char *c);
virtual	void InsertText(Position pos, const char *text);
virtual	void ChangeInsertion(Position length, const char *text);
virtual	void ClearAll();
virtual	void DeleteRange(Position start, Position lengthDelete);
virtual	void ClearDocumentStyle();
virtual	Position Length();
virtual	int CharAt(Position pos);
virtual	Position CurrentPos();
virtual	Position Anchor();
virtual	int StyleAt(Position pos);
virtual	int StyleIndexAt(Position pos);
virtual	void Redo();
virtual	void SetUndoCollection(bool collectUndo);
virtual	void SelectAll();
virtual	void SetSavePoint();
virtual	Position GetStyledText(void *tr);
virtual	Position GetStyledTextFull(TextRangeFull *tr);
virtual	bool CanRedo();
virtual	Line MarkerLineFromHandle(int markerHandle);
virtual	void MarkerDeleteHandle(int markerHandle);
virtual	int MarkerHandleFromLine(Line line, int which);
virtual	int MarkerNumberFromLine(Line line, int which);
virtual	bool UndoCollection();
virtual	Scintilla::WhiteSpace ViewWS();
virtual	void SetViewWS(Scintilla::WhiteSpace viewWS);
virtual	Scintilla::TabDrawMode TabDrawMode();
virtual	void SetTabDrawMode(Scintilla::TabDrawMode tabDrawMode);
virtual	Position PositionFromPoint(int x, int y);
virtual	Position PositionFromPointClose(int x, int y);
virtual	void GotoLine(Line line);
virtual	void GotoPos(Position caret);
virtual	void SetAnchor(Position anchor);
virtual	Position GetCurLine(Position length, char *text);
virtual	std::string GetCurLine(Position length);
virtual	Position EndStyled();
virtual	void ConvertEOLs(Scintilla::EndOfLine eolMode);
virtual	Scintilla::EndOfLine EOLMode();
virtual	void SetEOLMode(Scintilla::EndOfLine eolMode);
virtual	void StartStyling(Position start, int unused);
virtual	void SetStyling(Position length, int style);
virtual	bool BufferedDraw();
virtual	void SetBufferedDraw(bool buffered);
virtual	void SetTabWidth(int tabWidth);
virtual	int TabWidth();
virtual	void SetTabMinimumWidth(int pixels);
virtual	int TabMinimumWidth();
virtual	void ClearTabStops(Line line);
virtual	void AddTabStop(Line line, int x);
virtual	int GetNextTabStop(Line line, int x);
virtual	void SetCodePage(int codePage);
virtual	void SetFontLocale(const char *localeName);
virtual	int FontLocale(char *localeName);
virtual	std::string FontLocale();
virtual	Scintilla::IMEInteraction IMEInteraction();
virtual	void SetIMEInteraction(Scintilla::IMEInteraction imeInteraction);
virtual	void MarkerDefine(int markerNumber, Scintilla::MarkerSymbol markerSymbol);
virtual	void MarkerSetFore(int markerNumber, Colour fore);
virtual	void MarkerSetBack(int markerNumber, Colour back);
virtual	void MarkerSetBackSelected(int markerNumber, Colour back);
virtual	void MarkerSetForeTranslucent(int markerNumber, ColourAlpha fore);
virtual	void MarkerSetBackTranslucent(int markerNumber, ColourAlpha back);
virtual	void MarkerSetBackSelectedTranslucent(int markerNumber, ColourAlpha back);
virtual	void MarkerSetStrokeWidth(int markerNumber, int hundredths);
virtual	void MarkerEnableHighlight(bool enabled);
virtual	int MarkerAdd(Line line, int markerNumber);
virtual	void MarkerDelete(Line line, int markerNumber);
virtual	void MarkerDeleteAll(int markerNumber);
virtual	int MarkerGet(Line line);
virtual	Line MarkerNext(Line lineStart, int markerMask);
virtual	Line MarkerPrevious(Line lineStart, int markerMask);
virtual	void MarkerDefinePixmap(int markerNumber, const char *pixmap);
virtual	void MarkerAddSet(Line line, int markerSet);
virtual	void MarkerSetAlpha(int markerNumber, Scintilla::Alpha alpha);
virtual	Scintilla::Layer MarkerGetLayer(int markerNumber);
virtual	void MarkerSetLayer(int markerNumber, Scintilla::Layer layer);
virtual	void SetMarginTypeN(int margin, Scintilla::MarginType marginType);
virtual	Scintilla::MarginType MarginTypeN(int margin);
virtual	void SetMarginWidthN(int margin, int pixelWidth);
virtual	int MarginWidthN(int margin);
virtual	void SetMarginMaskN(int margin, int mask);
virtual	int MarginMaskN(int margin);
virtual	void SetMarginSensitiveN(int margin, bool sensitive);
virtual	bool MarginSensitiveN(int margin);
virtual	void SetMarginCursorN(int margin, Scintilla::CursorShape cursor);
virtual	Scintilla::CursorShape MarginCursorN(int margin);
virtual	void SetMarginBackN(int margin, Colour back);
virtual	Colour MarginBackN(int margin);
virtual	void SetMargins(int margins);
virtual	int Margins();
virtual	void StyleClearAll();
virtual	void StyleSetFore(int style, Colour fore);
virtual	void StyleSetBack(int style, Colour back);
virtual	void StyleSetBold(int style, bool bold);
virtual	void StyleSetItalic(int style, bool italic);
virtual	void StyleSetSize(int style, int sizePoints);
virtual	void StyleSetFont(int style, const char *fontName);
virtual	void StyleSetEOLFilled(int style, bool eolFilled);
virtual	void StyleResetDefault();
virtual	void StyleSetUnderline(int style, bool underline);
virtual	Colour StyleGetFore(int style);
virtual	Colour StyleGetBack(int style);
virtual	bool StyleGetBold(int style);
virtual	bool StyleGetItalic(int style);
virtual	int StyleGetSize(int style);
virtual	int StyleGetFont(int style, char *fontName);
virtual	std::string StyleGetFont(int style);
virtual	bool StyleGetEOLFilled(int style);
virtual	bool StyleGetUnderline(int style);
virtual	Scintilla::CaseVisible StyleGetCase(int style);
virtual	Scintilla::CharacterSet StyleGetCharacterSet(int style);
virtual	bool StyleGetVisible(int style);
virtual	bool StyleGetChangeable(int style);
virtual	bool StyleGetHotSpot(int style);
virtual	void StyleSetCase(int style, Scintilla::CaseVisible caseVisible);
virtual	void StyleSetSizeFractional(int style, int sizeHundredthPoints);
virtual	int StyleGetSizeFractional(int style);
virtual	void StyleSetWeight(int style, Scintilla::FontWeight weight);
virtual	Scintilla::FontWeight StyleGetWeight(int style);
virtual	void StyleSetCharacterSet(int style, Scintilla::CharacterSet characterSet);
virtual	void StyleSetHotSpot(int style, bool hotspot);
virtual	void StyleSetCheckMonospaced(int style, bool checkMonospaced);
virtual	bool StyleGetCheckMonospaced(int style);
virtual	void StyleSetStretch(int style, Scintilla::FontStretch stretch);
virtual	Scintilla::FontStretch StyleGetStretch(int style);
virtual	void StyleSetInvisibleRepresentation(int style, const char *representation);
virtual	int StyleGetInvisibleRepresentation(int style, char *representation);
virtual	std::string StyleGetInvisibleRepresentation(int style);
virtual	void SetElementColour(Scintilla::Element element, ColourAlpha colourElement);
virtual	ColourAlpha ElementColour(Scintilla::Element element);
virtual	void ResetElementColour(Scintilla::Element element);
virtual	bool ElementIsSet(Scintilla::Element element);
virtual	bool ElementAllowsTranslucent(Scintilla::Element element);
virtual	ColourAlpha ElementBaseColour(Scintilla::Element element);
virtual	void SetSelFore(bool useSetting, Colour fore);
virtual	void SetSelBack(bool useSetting, Colour back);
virtual	Scintilla::Alpha SelAlpha();
virtual	void SetSelAlpha(Scintilla::Alpha alpha);
virtual	bool SelEOLFilled();
virtual	void SetSelEOLFilled(bool filled);
virtual	Scintilla::Layer SelectionLayer();
virtual	void SetSelectionLayer(Scintilla::Layer layer);
virtual	Scintilla::Layer CaretLineLayer();
virtual	void SetCaretLineLayer(Scintilla::Layer layer);
virtual	bool CaretLineHighlightSubLine();
virtual	void SetCaretLineHighlightSubLine(bool subLine);
virtual	void SetCaretFore(Colour fore);
virtual	void AssignCmdKey(int keyDefinition, int sciCommand);
virtual	void ClearCmdKey(int keyDefinition);
virtual	void ClearAllCmdKeys();
virtual	void SetStylingEx(Position length, const char *styles);
virtual	void StyleSetVisible(int style, bool visible);
virtual	int CaretPeriod();
virtual	void SetCaretPeriod(int periodMilliseconds);
virtual	void SetWordChars(const char *characters);
virtual	int WordChars(char *characters);
virtual	std::string WordChars();
virtual	void SetCharacterCategoryOptimization(int countCharacters);
virtual	int CharacterCategoryOptimization();
virtual	void BeginUndoAction();
virtual	void EndUndoAction();
virtual	int UndoSequence();
virtual	int UndoActions();
virtual	void SetUndoSavePoint(int action);
virtual	int UndoSavePoint();
virtual	void SetUndoDetach(int action);
virtual	int UndoDetach();
virtual	void SetUndoTentative(int action);
virtual	int UndoTentative();
virtual	void SetUndoCurrent(int action);
virtual	int UndoCurrent();
virtual	void PushUndoActionType(int type, Position pos);
virtual	void ChangeLastUndoActionText(Position length, const char *text);
virtual	int UndoActionType(int action);
virtual	Position UndoActionPosition(int action);
virtual	int UndoActionText(int action, char *text);
virtual	std::string UndoActionText(int action);
virtual	void IndicSetStyle(int indicator, Scintilla::IndicatorStyle indicatorStyle);
virtual	Scintilla::IndicatorStyle IndicGetStyle(int indicator);
virtual	void IndicSetFore(int indicator, Colour fore);
virtual	Colour IndicGetFore(int indicator);
virtual	void IndicSetUnder(int indicator, bool under);
virtual	bool IndicGetUnder(int indicator);
virtual	void IndicSetHoverStyle(int indicator, Scintilla::IndicatorStyle indicatorStyle);
virtual	Scintilla::IndicatorStyle IndicGetHoverStyle(int indicator);
virtual	void IndicSetHoverFore(int indicator, Colour fore);
virtual	Colour IndicGetHoverFore(int indicator);
virtual	void IndicSetFlags(int indicator, Scintilla::IndicFlag flags);
virtual	Scintilla::IndicFlag IndicGetFlags(int indicator);
virtual	void IndicSetStrokeWidth(int indicator, int hundredths);
virtual	int IndicGetStrokeWidth(int indicator);
virtual	void SetWhitespaceFore(bool useSetting, Colour fore);
virtual	void SetWhitespaceBack(bool useSetting, Colour back);
virtual	void SetWhitespaceSize(int size);
virtual	int WhitespaceSize();
virtual	void SetLineState(Line line, int state);
virtual	int LineState(Line line);
virtual	int MaxLineState();
virtual	bool CaretLineVisible();
virtual	void SetCaretLineVisible(bool show);
virtual	Colour CaretLineBack();
virtual	void SetCaretLineBack(Colour back);
virtual	int CaretLineFrame();
virtual	void SetCaretLineFrame(int width);
virtual	void StyleSetChangeable(int style, bool changeable);
virtual	void AutoCShow(Position lengthEntered, const char *itemList);
virtual	void AutoCCancel();
virtual	bool AutoCActive();
virtual	Position AutoCPosStart();
virtual	void AutoCComplete();
virtual	void AutoCStops(const char *characterSet);
virtual	void AutoCSetSeparator(int separatorCharacter);
virtual	int AutoCGetSeparator();
virtual	void AutoCSelect(const char *select);
virtual	void AutoCSetCancelAtStart(bool cancel);
virtual	bool AutoCGetCancelAtStart();
virtual	void AutoCSetFillUps(const char *characterSet);
virtual	void AutoCSetChooseSingle(bool chooseSingle);
virtual	bool AutoCGetChooseSingle();
virtual	void AutoCSetIgnoreCase(bool ignoreCase);
virtual	bool AutoCGetIgnoreCase();
virtual	void UserListShow(int listType, const char *itemList);
virtual	void AutoCSetAutoHide(bool autoHide);
virtual	bool AutoCGetAutoHide();
virtual	void AutoCSetOptions(Scintilla::AutoCompleteOption options);
virtual	Scintilla::AutoCompleteOption AutoCGetOptions();
virtual	void AutoCSetDropRestOfWord(bool dropRestOfWord);
virtual	bool AutoCGetDropRestOfWord();
virtual	void RegisterImage(int type, const char *xpmData);
virtual	void ClearRegisteredImages();
virtual	int AutoCGetTypeSeparator();
virtual	void AutoCSetTypeSeparator(int separatorCharacter);
virtual	void AutoCSetMaxWidth(int characterCount);
virtual	int AutoCGetMaxWidth();
virtual	void AutoCSetMaxHeight(int rowCount);
virtual	int AutoCGetMaxHeight();
virtual	void AutoCSetStyle(int style);
virtual	int AutoCGetStyle();
virtual	void AutoCSetImageScale(int scalePercent);
virtual	int AutoCGetImageScale();
virtual	void SetIndent(int indentSize);
virtual	int Indent();
virtual	void SetUseTabs(bool useTabs);
virtual	bool UseTabs();
virtual	void SetLineIndentation(Line line, int indentation);
virtual	int LineIndentation(Line line);
virtual	Position LineIndentPosition(Line line);
virtual	Position Column(Position pos);
virtual	Position CountCharacters(Position start, Position end);
virtual	Position CountCodeUnits(Position start, Position end);
virtual	void SetHScrollBar(bool visible);
virtual	bool HScrollBar();
virtual	void SetIndentationGuides(Scintilla::IndentView indentView);
virtual	Scintilla::IndentView IndentationGuides();
virtual	void SetHighlightGuide(Position column);
virtual	Position HighlightGuide();
virtual	Position LineEndPosition(Line line);
virtual	int CodePage();
virtual	Colour CaretFore();
virtual	bool ReadOnly();
virtual	void SetCurrentPos(Position caret);
virtual	void SetSelectionStart(Position anchor);
virtual	Position SelectionStart();
virtual	void SetSelectionEnd(Position caret);
virtual	Position SelectionEnd();
virtual	void SetEmptySelection(Position caret);
virtual	void SetPrintMagnification(int magnification);
virtual	int PrintMagnification();
virtual	void SetPrintColourMode(Scintilla::PrintOption mode);
virtual	Scintilla::PrintOption PrintColourMode();
#undef FindText
virtual	Position FindText(Scintilla::FindOption searchFlags, void *ft);
virtual	Position FindTextFull(Scintilla::FindOption searchFlags, TextToFindFull *ft);
virtual	Position FormatRange(bool draw, void *fr);
virtual	Position FormatRangeFull(bool draw, RangeToFormatFull *fr);
virtual	void SetChangeHistory(Scintilla::ChangeHistoryOption changeHistory);
virtual	Scintilla::ChangeHistoryOption ChangeHistory();
virtual	void SetUndoSelectionHistory(Scintilla::UndoSelectionHistoryOption undoSelectionHistory);
virtual	Scintilla::UndoSelectionHistoryOption UndoSelectionHistory();
virtual	void SetSelectionSerialized(const char *selectionString);
virtual	Position SelectionSerialized(char *selectionString);
virtual	std::string SelectionSerialized();
virtual	Line FirstVisibleLine();
virtual	Position GetLine(Line line, char *text);
virtual	std::string GetLine(Line line);
virtual	Line LineCount();
virtual	void AllocateLines(Line lines);
virtual	void SetMarginLeft(int pixelWidth);
virtual	int MarginLeft();
virtual	void SetMarginRight(int pixelWidth);
virtual	int MarginRight();
virtual	bool Modify();
virtual	void SetSel(Position anchor, Position caret);
virtual	Position GetSelText(char *text);
virtual	std::string GetSelText();
virtual	Position GetTextRange(void *tr);
virtual	Position GetTextRangeFull(TextRangeFull *tr);
virtual	void HideSelection(bool hide);
virtual	bool SelectionHidden();
virtual	int PointXFromPosition(Position pos);
virtual	int PointYFromPosition(Position pos);
virtual	Line LineFromPosition(Position pos);
virtual	Position PositionFromLine(Line line);
virtual	void LineScroll(Position columns, Line lines);
virtual	void ScrollVertical(Line docLine, Line subLine);
virtual	void ScrollCaret();
virtual	void ScrollRange(Position secondary, Position primary);
virtual	void ReplaceSel(const char *text);
virtual	void SetReadOnly(bool readOnly);
virtual	void Null();
virtual	bool CanPaste();
virtual	bool CanUndo();
virtual	void EmptyUndoBuffer();
virtual	void Undo();
virtual	void Cut();
virtual	void Copy();
virtual	void Paste();
virtual	void Clear();
virtual	void SetText(const char *text);
virtual	Position GetText(Position length, char *text);
virtual	std::string GetText(Position length);
virtual	Position TextLength();
virtual	void *DirectFunction();
virtual	void *DirectStatusFunction();
virtual	void *DirectPointer();
virtual	void SetOvertype(bool overType);
virtual	bool Overtype();
virtual	void SetCaretWidth(int pixelWidth);
virtual	int CaretWidth();
virtual	void SetTargetStart(Position start);
virtual	Position TargetStart();
virtual	void SetTargetStartVirtualSpace(Position space);
virtual	Position TargetStartVirtualSpace();
virtual	void SetTargetEnd(Position end);
virtual	Position TargetEnd();
virtual	void SetTargetEndVirtualSpace(Position space);
virtual	Position TargetEndVirtualSpace();
virtual	void SetTargetRange(Position start, Position end);
virtual	Position TargetText(char *text);
virtual	std::string TargetText();
virtual	void TargetFromSelection();
virtual	void TargetWholeDocument();
virtual	Position ReplaceTarget(Position length, const char *text);
virtual	Position ReplaceTargetRE(Position length, const char *text);
virtual	Position ReplaceTargetMinimal(Position length, const char *text);
virtual	Position SearchInTarget(Position length, const char *text);
virtual	void SetSearchFlags(Scintilla::FindOption searchFlags);
virtual	Scintilla::FindOption SearchFlags();
virtual	void CallTipShow(Position pos, const char *definition);
virtual	void CallTipCancel();
virtual	bool CallTipActive();
virtual	Position CallTipPosStart();
virtual	void CallTipSetPosStart(Position posStart);
virtual	void CallTipSetHlt(Position highlightStart, Position highlightEnd);
virtual	void CallTipSetBack(Colour back);
virtual	void CallTipSetFore(Colour fore);
virtual	void CallTipSetForeHlt(Colour fore);
virtual	void CallTipUseStyle(int tabSize);
virtual	void CallTipSetPosition(bool above);
virtual	Line VisibleFromDocLine(Line docLine);
virtual	Line DocLineFromVisible(Line displayLine);
virtual	Line WrapCount(Line docLine);
virtual	void SetFoldLevel(Line line, Scintilla::FoldLevel level);
virtual	Scintilla::FoldLevel FoldLevel(Line line);
virtual	Line LastChild(Line line, Scintilla::FoldLevel level);
virtual	Line FoldParent(Line line);
virtual	void ShowLines(Line lineStart, Line lineEnd);
virtual	void HideLines(Line lineStart, Line lineEnd);
virtual	bool LineVisible(Line line);
virtual	bool AllLinesVisible();
virtual	void SetFoldExpanded(Line line, bool expanded);
virtual	bool FoldExpanded(Line line);
virtual	void ToggleFold(Line line);
virtual	void ToggleFoldShowText(Line line, const char *text);
virtual	void FoldDisplayTextSetStyle(Scintilla::FoldDisplayTextStyle style);
virtual	Scintilla::FoldDisplayTextStyle FoldDisplayTextGetStyle();
virtual	void SetDefaultFoldDisplayText(const char *text);
virtual	int GetDefaultFoldDisplayText(char *text);
virtual	std::string GetDefaultFoldDisplayText();
virtual	void FoldLine(Line line, Scintilla::FoldAction action);
virtual	void FoldChildren(Line line, Scintilla::FoldAction action);
virtual	void ExpandChildren(Line line, Scintilla::FoldLevel level);
virtual	void FoldAll(Scintilla::FoldAction action);
virtual	void EnsureVisible(Line line);
virtual	void SetAutomaticFold(Scintilla::AutomaticFold automaticFold);
virtual	Scintilla::AutomaticFold AutomaticFold();
virtual	void SetFoldFlags(Scintilla::FoldFlag flags);
virtual	void EnsureVisibleEnforcePolicy(Line line);
virtual	void SetTabIndents(bool tabIndents);
virtual	bool TabIndents();
virtual	void SetBackSpaceUnIndents(bool bsUnIndents);
virtual	bool BackSpaceUnIndents();
virtual	void SetMouseDwellTime(int periodMilliseconds);
virtual	int MouseDwellTime();
virtual	Position WordStartPosition(Position pos, bool onlyWordCharacters);
virtual	Position WordEndPosition(Position pos, bool onlyWordCharacters);
virtual	bool IsRangeWord(Position start, Position end);
virtual	void SetIdleStyling(Scintilla::IdleStyling idleStyling);
virtual	Scintilla::IdleStyling IdleStyling();
virtual	void SetWrapMode(Scintilla::Wrap wrapMode);
virtual	Scintilla::Wrap WrapMode();
virtual	void SetWrapVisualFlags(Scintilla::WrapVisualFlag wrapVisualFlags);
virtual	Scintilla::WrapVisualFlag WrapVisualFlags();
virtual	void SetWrapVisualFlagsLocation(Scintilla::WrapVisualLocation wrapVisualFlagsLocation);
virtual	Scintilla::WrapVisualLocation WrapVisualFlagsLocation();
virtual	void SetWrapStartIndent(int indent);
virtual	int WrapStartIndent();
virtual	void SetWrapIndentMode(Scintilla::WrapIndentMode wrapIndentMode);
virtual	Scintilla::WrapIndentMode WrapIndentMode();
virtual	void SetLayoutCache(Scintilla::LineCache cacheMode);
virtual	Scintilla::LineCache LayoutCache();
virtual	void SetScrollWidth(int pixelWidth);
virtual	int ScrollWidth();
virtual	void SetScrollWidthTracking(bool tracking);
virtual	bool ScrollWidthTracking();
virtual	int TextWidth(int style, const char *text);
virtual	void SetEndAtLastLine(bool endAtLastLine);
virtual	bool EndAtLastLine();
virtual	int TextHeight(Line line);
virtual	void SetVScrollBar(bool visible);
virtual	bool VScrollBar();
virtual	void AppendText(Position length, const char *text);
virtual	Scintilla::PhasesDraw PhasesDraw();
virtual	void SetPhasesDraw(Scintilla::PhasesDraw phases);
virtual	void SetFontQuality(Scintilla::FontQuality fontQuality);
virtual	Scintilla::FontQuality FontQuality();
virtual	void SetFirstVisibleLine(Line displayLine);
virtual	void SetMultiPaste(Scintilla::MultiPaste multiPaste);
virtual	Scintilla::MultiPaste MultiPaste();
virtual	int Tag(int tagNumber, char *tagValue);
virtual	std::string Tag(int tagNumber);
virtual	void LinesJoin();
virtual	void LinesSplit(int pixelWidth);
virtual	void SetFoldMarginColour(bool useSetting, Colour back);
virtual	void SetFoldMarginHiColour(bool useSetting, Colour fore);
virtual	void SetAccessibility(Scintilla::Accessibility accessibility);
virtual	Scintilla::Accessibility Accessibility();
virtual	void LineDown();
virtual	void LineDownExtend();
virtual	void LineUp();
virtual	void LineUpExtend();
virtual	void CharLeft();
virtual	void CharLeftExtend();
virtual	void CharRight();
virtual	void CharRightExtend();
virtual	void WordLeft();
virtual	void WordLeftExtend();
virtual	void WordRight();
virtual	void WordRightExtend();
virtual	void Home();
virtual	void HomeExtend();
virtual	void LineEnd();
virtual	void LineEndExtend();
virtual	void DocumentStart();
virtual	void DocumentStartExtend();
virtual	void DocumentEnd();
virtual	void DocumentEndExtend();
virtual	void PageUp();
virtual	void PageUpExtend();
virtual	void PageDown();
virtual	void PageDownExtend();
virtual	void EditToggleOvertype();
virtual	void Cancel();
virtual	void DeleteBack();
virtual	void Tab();
virtual	void LineIndent();
virtual	void BackTab();
virtual	void LineDedent();
virtual	void NewLine();
virtual	void FormFeed();
virtual	void VCHome();
virtual	void VCHomeExtend();
virtual	void ZoomIn();
virtual	void ZoomOut();
virtual	void DelWordLeft();
virtual	void DelWordRight();
virtual	void DelWordRightEnd();
virtual	void LineCut();
virtual	void LineDelete();
virtual	void LineTranspose();
virtual	void LineReverse();
virtual	void LineDuplicate();
virtual	void LowerCase();
virtual	void UpperCase();
virtual	void LineScrollDown();
virtual	void LineScrollUp();
virtual	void DeleteBackNotLine();
virtual	void HomeDisplay();
virtual	void HomeDisplayExtend();
virtual	void LineEndDisplay();
virtual	void LineEndDisplayExtend();
virtual	void HomeWrap();
virtual	void HomeWrapExtend();
virtual	void LineEndWrap();
virtual	void LineEndWrapExtend();
virtual	void VCHomeWrap();
virtual	void VCHomeWrapExtend();
virtual	void LineCopy();
virtual	void MoveCaretInsideView();
virtual	Position LineLength(Line line);
virtual	void BraceHighlight(Position posA, Position posB);
virtual	void BraceHighlightIndicator(bool useSetting, int indicator);
virtual	void BraceBadLight(Position pos);
virtual	void BraceBadLightIndicator(bool useSetting, int indicator);
virtual	Position BraceMatch(Position pos, int maxReStyle);
virtual	Position BraceMatchNext(Position pos, Position startPos);
virtual	bool ViewEOL();
virtual	void SetViewEOL(bool visible);
virtual	IDocumentEditable *DocPointer();
virtual	void SetDocPointer(IDocumentEditable *doc);
virtual	void SetModEventMask(Scintilla::ModificationFlags eventMask);
virtual	Position EdgeColumn();
virtual	void SetEdgeColumn(Position column);
virtual	Scintilla::EdgeVisualStyle EdgeMode();
virtual	void SetEdgeMode(Scintilla::EdgeVisualStyle edgeMode);
virtual	Colour EdgeColour();
virtual	void SetEdgeColour(Colour edgeColour);
virtual	void MultiEdgeAddLine(Position column, Colour edgeColour);
virtual	void MultiEdgeClearAll();
virtual	Position MultiEdgeColumn(int which);
virtual	void SearchAnchor();
virtual	Position SearchNext(Scintilla::FindOption searchFlags, const char *text);
virtual	Position SearchPrev(Scintilla::FindOption searchFlags, const char *text);
virtual	Line LinesOnScreen();
virtual	void UsePopUp(Scintilla::PopUp popUpMode);
virtual	bool SelectionIsRectangle();
virtual	void SetZoom(int zoomInPoints);
virtual	int Zoom();
virtual	IDocumentEditable *CreateDocument(Position bytes, Scintilla::DocumentOption documentOptions);
virtual	void AddRefDocument(IDocumentEditable *doc);
virtual	void ReleaseDocument(IDocumentEditable *doc);
virtual	Scintilla::DocumentOption DocumentOptions();
virtual	Scintilla::ModificationFlags ModEventMask();
virtual	void SetCommandEvents(bool commandEvents);
virtual	bool CommandEvents();
virtual	void SetFocus(bool focus);
virtual	bool Focus();
virtual	void SetStatus(Scintilla::Status status);
virtual	Scintilla::Status Status();
virtual	void SetMouseDownCaptures(bool captures);
virtual	bool MouseDownCaptures();
virtual	void SetMouseWheelCaptures(bool captures);
virtual	bool MouseWheelCaptures();
virtual	void SetCursor(Scintilla::CursorShape cursorType);
virtual	Scintilla::CursorShape Cursor();
virtual	void SetControlCharSymbol(int symbol);
virtual	int ControlCharSymbol();
virtual	void WordPartLeft();
virtual	void WordPartLeftExtend();
virtual	void WordPartRight();
virtual	void WordPartRightExtend();
virtual	void SetVisiblePolicy(Scintilla::VisiblePolicy visiblePolicy, int visibleSlop);
virtual	void DelLineLeft();
virtual	void DelLineRight();
virtual	void SetXOffset(int xOffset);
virtual	int XOffset();
virtual	void ChooseCaretX();
virtual	void GrabFocus();
virtual	void SetXCaretPolicy(Scintilla::CaretPolicy caretPolicy, int caretSlop);
virtual	void SetYCaretPolicy(Scintilla::CaretPolicy caretPolicy, int caretSlop);
virtual	void SetPrintWrapMode(Scintilla::Wrap wrapMode);
virtual	Scintilla::Wrap PrintWrapMode();
virtual	void SetHotspotActiveFore(bool useSetting, Colour fore);
virtual	Colour HotspotActiveFore();
virtual	void SetHotspotActiveBack(bool useSetting, Colour back);
virtual	Colour HotspotActiveBack();
virtual	void SetHotspotActiveUnderline(bool underline);
virtual	bool HotspotActiveUnderline();
virtual	void SetHotspotSingleLine(bool singleLine);
virtual	bool HotspotSingleLine();
virtual	void ParaDown();
virtual	void ParaDownExtend();
virtual	void ParaUp();
virtual	void ParaUpExtend();
virtual	Position PositionBefore(Position pos);
virtual	Position PositionAfter(Position pos);
virtual	Position PositionRelative(Position pos, Position relative);
virtual	Position PositionRelativeCodeUnits(Position pos, Position relative);
virtual	void CopyRange(Position start, Position end);
virtual	void CopyText(Position length, const char *text);
virtual	void SetSelectionMode(Scintilla::SelectionMode selectionMode);
virtual	void ChangeSelectionMode(Scintilla::SelectionMode selectionMode);
virtual	Scintilla::SelectionMode SelectionMode();
virtual	void SetMoveExtendsSelection(bool moveExtendsSelection);
virtual	bool MoveExtendsSelection();
virtual	Position GetLineSelStartPosition(Line line);
virtual	Position GetLineSelEndPosition(Line line);
virtual	void LineDownRectExtend();
virtual	void LineUpRectExtend();
virtual	void CharLeftRectExtend();
virtual	void CharRightRectExtend();
virtual	void HomeRectExtend();
virtual	void VCHomeRectExtend();
virtual	void LineEndRectExtend();
virtual	void PageUpRectExtend();
virtual	void PageDownRectExtend();
virtual	void StutteredPageUp();
virtual	void StutteredPageUpExtend();
virtual	void StutteredPageDown();
virtual	void StutteredPageDownExtend();
virtual	void WordLeftEnd();
virtual	void WordLeftEndExtend();
virtual	void WordRightEnd();
virtual	void WordRightEndExtend();
virtual	void SetWhitespaceChars(const char *characters);
virtual	int WhitespaceChars(char *characters);
virtual	std::string WhitespaceChars();
virtual	void SetPunctuationChars(const char *characters);
virtual	int PunctuationChars(char *characters);
virtual	std::string PunctuationChars();
virtual	void SetCharsDefault();
virtual	int AutoCGetCurrent();
virtual	int AutoCGetCurrentText(char *text);
virtual	std::string AutoCGetCurrentText();
virtual	void AutoCSetCaseInsensitiveBehaviour(Scintilla::CaseInsensitiveBehaviour behaviour);
virtual	Scintilla::CaseInsensitiveBehaviour AutoCGetCaseInsensitiveBehaviour();
virtual	void AutoCSetMulti(Scintilla::MultiAutoComplete multi);
virtual	Scintilla::MultiAutoComplete AutoCGetMulti();
virtual	void AutoCSetOrder(Scintilla::Ordering order);
virtual	Scintilla::Ordering AutoCGetOrder();
virtual	void Allocate(Position bytes);
virtual	Position TargetAsUTF8(char *s);
virtual	std::string TargetAsUTF8();
virtual	void SetLengthForEncode(Position bytes);
virtual	Position EncodedFromUTF8(const char *utf8, char *encoded);
virtual	std::string EncodedFromUTF8(const char *utf8);
virtual	Position FindColumn(Line line, Position column);
virtual	Scintilla::CaretSticky CaretSticky();
virtual	void SetCaretSticky(Scintilla::CaretSticky useCaretStickyBehaviour);
virtual	void ToggleCaretSticky();
virtual	void SetPasteConvertEndings(bool convert);
virtual	bool PasteConvertEndings();
virtual	void ReplaceRectangular(Position length, const char *text);
virtual	void SelectionDuplicate();
virtual	void SetCaretLineBackAlpha(Scintilla::Alpha alpha);
virtual	Scintilla::Alpha CaretLineBackAlpha();
virtual	void SetCaretStyle(Scintilla::CaretStyle caretStyle);
virtual	Scintilla::CaretStyle CaretStyle();
virtual	void SetIndicatorCurrent(int indicator);
virtual	int IndicatorCurrent();
virtual	void SetIndicatorValue(int value);
virtual	int IndicatorValue();
virtual	void IndicatorFillRange(Position start, Position lengthFill);
virtual	void IndicatorClearRange(Position start, Position lengthClear);
virtual	int IndicatorAllOnFor(Position pos);
virtual	int IndicatorValueAt(int indicator, Position pos);
virtual	Position IndicatorStart(int indicator, Position pos);
virtual	Position IndicatorEnd(int indicator, Position pos);
virtual	void SetPositionCache(int size);
virtual	int PositionCache();
virtual	void SetLayoutThreads(int threads);
virtual	int LayoutThreads();
virtual	void CopyAllowLine();
virtual	void CutAllowLine();
virtual	void SetCopySeparator(const char *separator);
virtual	int CopySeparator(char *separator);
virtual	std::string CopySeparator();
virtual	void *CharacterPointer();
virtual	void *RangePointer(Position start, Position lengthRange);
virtual	Position GapPosition();
virtual	void IndicSetAlpha(int indicator, Scintilla::Alpha alpha);
virtual	Scintilla::Alpha IndicGetAlpha(int indicator);
virtual	void IndicSetOutlineAlpha(int indicator, Scintilla::Alpha alpha);
virtual	Scintilla::Alpha IndicGetOutlineAlpha(int indicator);
virtual	void SetExtraAscent(int extraAscent);
virtual	int ExtraAscent();
virtual	void SetExtraDescent(int extraDescent);
virtual	int ExtraDescent();
virtual	Scintilla::MarkerSymbol MarkerSymbolDefined(int markerNumber);
virtual	void MarginSetText(Line line, const char *text);
virtual	int MarginGetText(Line line, char *text);
virtual	std::string MarginGetText(Line line);
virtual	void MarginSetStyle(Line line, int style);
virtual	int MarginGetStyle(Line line);
virtual	void MarginSetStyles(Line line, const char *styles);
virtual	int MarginGetStyles(Line line, char *styles);
virtual	std::string MarginGetStyles(Line line);
virtual	void MarginTextClearAll();
virtual	void MarginSetStyleOffset(int style);
virtual	int MarginGetStyleOffset();
virtual	void SetMarginOptions(Scintilla::MarginOption marginOptions);
virtual	Scintilla::MarginOption MarginOptions();
virtual	void AnnotationSetText(Line line, const char *text);
virtual	int AnnotationGetText(Line line, char *text);
virtual	std::string AnnotationGetText(Line line);
virtual	void AnnotationSetStyle(Line line, int style);
virtual	int AnnotationGetStyle(Line line);
virtual	void AnnotationSetStyles(Line line, const char *styles);
virtual	int AnnotationGetStyles(Line line, char *styles);
virtual	std::string AnnotationGetStyles(Line line);
virtual	int AnnotationGetLines(Line line);
virtual	void AnnotationClearAll();
virtual	void AnnotationSetVisible(Scintilla::AnnotationVisible visible);
virtual	Scintilla::AnnotationVisible AnnotationGetVisible();
virtual	void AnnotationSetStyleOffset(int style);
virtual	int AnnotationGetStyleOffset();
virtual	void ReleaseAllExtendedStyles();
virtual	int AllocateExtendedStyles(int numberStyles);
virtual	void AddUndoAction(int token, Scintilla::UndoFlags flags);
virtual	Position CharPositionFromPoint(int x, int y);
virtual	Position CharPositionFromPointClose(int x, int y);
virtual	void SetMouseSelectionRectangularSwitch(bool mouseSelectionRectangularSwitch);
virtual	bool MouseSelectionRectangularSwitch();
virtual	void SetMultipleSelection(bool multipleSelection);
virtual	bool MultipleSelection();
virtual	void SetAdditionalSelectionTyping(bool additionalSelectionTyping);
virtual	bool AdditionalSelectionTyping();
virtual	void SetAdditionalCaretsBlink(bool additionalCaretsBlink);
virtual	bool AdditionalCaretsBlink();
virtual	void SetAdditionalCaretsVisible(bool additionalCaretsVisible);
virtual	bool AdditionalCaretsVisible();
virtual	int Selections();
virtual	bool SelectionEmpty();
virtual	void ClearSelections();
virtual	void SetSelection(Position caret, Position anchor);
virtual	void AddSelection(Position caret, Position anchor);
virtual	int SelectionFromPoint(int x, int y);
virtual	void DropSelectionN(int selection);
virtual	void SetMainSelection(int selection);
virtual	int MainSelection();
virtual	void SetSelectionNCaret(int selection, Position caret);
virtual	Position SelectionNCaret(int selection);
virtual	void SetSelectionNAnchor(int selection, Position anchor);
virtual	Position SelectionNAnchor(int selection);
virtual	void SetSelectionNCaretVirtualSpace(int selection, Position space);
virtual	Position SelectionNCaretVirtualSpace(int selection);
virtual	void SetSelectionNAnchorVirtualSpace(int selection, Position space);
virtual	Position SelectionNAnchorVirtualSpace(int selection);
virtual	void SetSelectionNStart(int selection, Position anchor);
virtual	Position SelectionNStart(int selection);
virtual	Position SelectionNStartVirtualSpace(int selection);
virtual	void SetSelectionNEnd(int selection, Position caret);
virtual	Position SelectionNEndVirtualSpace(int selection);
virtual	Position SelectionNEnd(int selection);
virtual	void SetRectangularSelectionCaret(Position caret);
virtual	Position RectangularSelectionCaret();
virtual	void SetRectangularSelectionAnchor(Position anchor);
virtual	Position RectangularSelectionAnchor();
virtual	void SetRectangularSelectionCaretVirtualSpace(Position space);
virtual	Position RectangularSelectionCaretVirtualSpace();
virtual	void SetRectangularSelectionAnchorVirtualSpace(Position space);
virtual	Position RectangularSelectionAnchorVirtualSpace();
virtual	void SetVirtualSpaceOptions(Scintilla::VirtualSpace virtualSpaceOptions);
virtual	Scintilla::VirtualSpace VirtualSpaceOptions();
virtual	void SetRectangularSelectionModifier(int modifier);
virtual	int RectangularSelectionModifier();
virtual	void SetAdditionalSelFore(Colour fore);
virtual	void SetAdditionalSelBack(Colour back);
virtual	void SetAdditionalSelAlpha(Scintilla::Alpha alpha);
virtual	Scintilla::Alpha AdditionalSelAlpha();
virtual	void SetAdditionalCaretFore(Colour fore);
virtual	Colour AdditionalCaretFore();
virtual	void RotateSelection();
virtual	void SwapMainAnchorCaret();
virtual	void MultipleSelectAddNext();
virtual	void MultipleSelectAddEach();
virtual	int ChangeLexerState(Position start, Position end);
virtual	Line ContractedFoldNext(Line lineStart);
virtual	void VerticalCentreCaret();
virtual	void MoveSelectedLinesUp();
virtual	void MoveSelectedLinesDown();
virtual	void SetIdentifier(int identifier);
virtual	int Identifier();
virtual	void RGBAImageSetWidth(int width);
virtual	void RGBAImageSetHeight(int height);
virtual	void RGBAImageSetScale(int scalePercent);
virtual	void MarkerDefineRGBAImage(int markerNumber, const char *pixels);
virtual	void RegisterRGBAImage(int type, const char *pixels);
virtual	void ScrollToStart();
virtual	void ScrollToEnd();
virtual	void SetTechnology(Scintilla::Technology technology);
virtual	Scintilla::Technology Technology();
virtual	void *CreateLoader(Position bytes, Scintilla::DocumentOption documentOptions);
virtual	void FindIndicatorShow(Position start, Position end);
virtual	void FindIndicatorFlash(Position start, Position end);
virtual	void FindIndicatorHide();
virtual	void VCHomeDisplay();
virtual	void VCHomeDisplayExtend();
virtual	bool CaretLineVisibleAlways();
virtual	void SetCaretLineVisibleAlways(bool alwaysVisible);
virtual	void SetLineEndTypesAllowed(Scintilla::LineEndType lineEndBitSet);
virtual	Scintilla::LineEndType LineEndTypesAllowed();
virtual	Scintilla::LineEndType LineEndTypesActive();
virtual	void SetRepresentation(const char *encodedCharacter, const char *representation);
virtual	int Representation(const char *encodedCharacter, char *representation);
virtual	std::string Representation(const char *encodedCharacter);
virtual	void ClearRepresentation(const char *encodedCharacter);
virtual	void ClearAllRepresentations();
virtual	void SetRepresentationAppearance(const char *encodedCharacter, Scintilla::RepresentationAppearance appearance);
virtual	Scintilla::RepresentationAppearance RepresentationAppearance(const char *encodedCharacter);
virtual	void SetRepresentationColour(const char *encodedCharacter, ColourAlpha colour);
virtual	ColourAlpha RepresentationColour(const char *encodedCharacter);
virtual	void EOLAnnotationSetText(Line line, const char *text);
virtual	int EOLAnnotationGetText(Line line, char *text);
virtual	std::string EOLAnnotationGetText(Line line);
virtual	void EOLAnnotationSetStyle(Line line, int style);
virtual	int EOLAnnotationGetStyle(Line line);
virtual	void EOLAnnotationClearAll();
virtual	void EOLAnnotationSetVisible(Scintilla::EOLAnnotationVisible visible);
virtual	Scintilla::EOLAnnotationVisible EOLAnnotationGetVisible();
virtual	void EOLAnnotationSetStyleOffset(int style);
virtual	int EOLAnnotationGetStyleOffset();
virtual	bool SupportsFeature(Scintilla::Supports feature);
virtual	Scintilla::LineCharacterIndexType LineCharacterIndex();
virtual	void AllocateLineCharacterIndex(Scintilla::LineCharacterIndexType lineCharacterIndex);
virtual	void ReleaseLineCharacterIndex(Scintilla::LineCharacterIndexType lineCharacterIndex);
virtual	Line LineFromIndexPosition(Position pos, Scintilla::LineCharacterIndexType lineCharacterIndex);
virtual	Position IndexPositionFromLine(Line line, Scintilla::LineCharacterIndexType lineCharacterIndex);
virtual	void StartRecord();
virtual	void StopRecord();
virtual	int Lexer();
virtual	void Colourise(Position start, Position end);
virtual	void SetProperty(const char *key, const char *value);
virtual	void SetKeyWords(int keyWordSet, const char *keyWords);
virtual	int Property(const char *key, char *value);
virtual	std::string Property(const char *key);
virtual	int PropertyExpanded(const char *key, char *value);
virtual	std::string PropertyExpanded(const char *key);
virtual	int PropertyInt(const char *key, int defaultValue);
virtual	int LexerLanguage(char *language);
virtual	std::string LexerLanguage();
virtual	void *PrivateLexerCall(int operation, void *pointer);
virtual	int PropertyNames(char *names);
virtual	std::string PropertyNames();
virtual	Scintilla::TypeProperty PropertyType(const char *name);
virtual	int DescribeProperty(const char *name, char *description);
virtual	std::string DescribeProperty(const char *name);
virtual	int DescribeKeyWordSets(char *descriptions);
virtual	std::string DescribeKeyWordSets();
virtual	Scintilla::LineEndType LineEndTypesSupported();
virtual	int AllocateSubStyles(int styleBase, int numberStyles);
virtual	int SubStylesStart(int styleBase);
virtual	int SubStylesLength(int styleBase);
virtual	int StyleFromSubStyle(int subStyle);
virtual	int PrimaryStyleFromStyle(int style);
virtual	void FreeSubStyles();
virtual	void SetIdentifiers(int style, const char *identifiers);
virtual	int DistanceToSecondaryStyles();
virtual	int SubStyleBases(char *styles);
virtual	std::string SubStyleBases();
virtual	int NamedStyles();
virtual	int NameOfStyle(int style, char *name);
virtual	std::string NameOfStyle(int style);
virtual	int TagsOfStyle(int style, char *tags);
virtual	std::string TagsOfStyle(int style);
virtual	int DescriptionOfStyle(int style, char *description);
virtual	std::string DescriptionOfStyle(int style);
virtual	void SetILexer(void *ilexer);
virtual	Scintilla::Bidirectional Bidirectional();
virtual	void SetBidirectional(Scintilla::Bidirectional bidirectional);

//--Autogenerated -- end of section automatically generated from Scintilla.iface

};
}
typedef Scintilla::ScintillaCall* pSciCaller;

#endif
